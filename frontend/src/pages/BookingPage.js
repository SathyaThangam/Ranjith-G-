import React, { Component } from "react";
import uid from "uid";
import Cookie from "js-cookie";
import "../css/BookingPage.scss";
import TicketComponent from "../Components/TicketComponent";
import AlertComponent from "../Components/AlertComponent";
import { getTravelTimeObject, formatAlert } from "../helpers/helper";
import { postRequest, getRequest } from "../helpers/request-helper";
import { addTicket, deleteTicket } from "../redux";
import { connect } from "react-redux";
import { validateEmail, isValidPhoneNo } from "../helpers/helper";
class BookingPage extends Component {
	constructor(props) {
		super(props);
		this.state = {
			routeData: {},
			bookedSeats: [],
			preBookedSeats: [],
			tickets: [],
			sourceTimeformat: "",
			sourceDateformat: "",
			destTimeformat: "",
			destDateformat: "",
			contactEmail: "",
			contactEmailError: false,
			contactPhoneNo: "",
			contactPhoneNoError: false,
			totalprice: 0,
			alert: (
				<>
				</>
			),
		};
	}

	// Generates bus seat components
	busSeatHandler = () => {
		const { routeData, bookedSeats, preBookedSeats } = this.state;
		const seats = [];
		var classList = "bus-seat";
		for (let i = 1; i <= routeData.seats; i++) {
			classList = "bus-seat";
			let isPreBooked = preBookedSeats.includes(i.toString());
			if (!isPreBooked && bookedSeats.includes(i.toString())) {
				classList = "bus-seat active";
			}

			seats.push(
				<button
					className={classList}
					key={uid(20)}
					value={i}
					disabled={isPreBooked}
					onClick={(e) => this.seatHandler(e)}
				></button>
			);
		}
		return seats;
	};

	// onClick handler for bus seats generated by busSeatHandler
	// Generates Ticket Component if a seat is selected
	seatHandler = (event) => {
		const value = event.target.value;
		var seats = this.state.bookedSeats;
		var ticketPrice = this.state.routeData.ticketprice;
		// remove seat if already added
		if (seats.includes(value.toString())) {
			seats = seats.filter((seat) => seat !== value.toString());
			this.props.deleteTicket(value.toString());
		} else {
			seats.push(value);
			this.props.addTicket(value.toString());
		}
		var totalprice = ticketPrice * seats.length;
		//Generate ticket components
		var tickets = seats.map((item, i) => (
			<TicketComponent key={uid(20)} seatNumber={item} value={i} />
		));
		this.setState({ bookedSeats: seats, tickets: tickets, totalprice });
	};

	isEmpty = (value) => {
		if (value === "" || value === undefined || value === null) return true;
		else return false;
	};

	//Payment Gateway
	paymentHandler = async (bookingDetails) => {
		const PAYMENT_API_ENDPOINT = "/payment/";
		const sessionID = Cookie.get("sessionID");
		const itemData = {
			bookingDetails,
			totalprice: this.state.totalprice,
			sessionID,
		};
		console.log("Payment handler", itemData);
		const orderUrl = `${PAYMENT_API_ENDPOINT}order`;
		try {
			const response = await postRequest(orderUrl, itemData);
			const { data } = response;
			console.log("data from order", data);
			const options = {
				key: process.env.RAZORPAY_API_KEY,
				name: "getBus",
				description: "Tickets",
				order_id: data.id,
				handler: (response) => {
					try {
						const paymentId = response.razorpay_payment_id;
						const url = `${PAYMENT_API_ENDPOINT}capture/${paymentId}`;
						postRequest(url, itemData)
							.then((res) => {
								const data = res.data;
								if (data && data.status === "captured") {
									this.setState((prev) => ({
										alert: formatAlert(
											prev.alert,
											<AlertComponent className="success">
												Payment Success
											</AlertComponent>
										),
									}));
									this.props.history.replace("/viewtickets");
								} else {
									console.log("error in captured");
									this.setState((prev) => ({
										alert: formatAlert(
											prev.alert,
											<AlertComponent>
												Payment Failure.. Please try
												again later
											</AlertComponent>
										),
									}));
								}
							})
							.catch((err) => console.log(err));
						// console.log(captureResponse);
					} catch (err) {
						console.log(err);
					}
				},
				theme: {
					color: "#6cfc6a",
				},
			};
			const rzp1 = new window.Razorpay(options);
			rzp1.open();
		} catch (error) {
			console.log(error);
		}
	};

	bookingHandler = () => {
		var bookingDetails = {};
		const { contactEmail, contactPhoneNo, routeData } = this.state;
		const ticketData = [...this.props.ticketData];
		console.log("ticketData", ticketData);
		if (
			!this.isEmpty(contactEmail) &&
			!this.isEmpty(contactPhoneNo) &&
			ticketData.length !== 0
		) {
			bookingDetails = {
				contactEmail,
				contactPhoneNo,
				ticketData,
				routeData,
			};
			this.paymentHandler(bookingDetails);
		} else {
			console.log("err");
			this.setState((prev) => ({
				alert: formatAlert(
					prev.alert,
					<AlertComponent>Empty email/phone number</AlertComponent>
				),
			}));
		}
	};

	// Load data from server if the props is missing
	loadBookingData = async () => {
		const busid = this.props.computedMatch.params.id;
		var routeData = "";
		const sessionID = Cookie.get("sessionID");
		getRequest("/data/getbusdetails", {
			busid,
			sessionID,
		})
			.then((res) => {
				if (res !== undefined) {
					console.log("Props from server", res);
					routeData = res.data.travelData;
					this.setState({
						routeData: routeData,
						preBookedSeats: res.data.bookedSeats,
						...getTravelTimeObject(
							routeData.sourceTime,
							routeData.destinationTime
						),
					});
				}
			})
			.catch((err) => console.log(err));
	};

	componentDidMount() {
		this.loadBookingData();
		const script = document.createElement("script");
		script.src = "https://checkout.razorpay.com/v1/checkout.js";
		script.defer = true;
		document.body.appendChild(script);
	}

	render() {
		const { routeData, preBookedSeats } = this.state;
		return (
			<div className="booking-container">
				<div className="travel-details-container">
					<div className="heading">Review your booking</div>
					<div className="travel-details-content">
						<div className="pull-left">
							<h1>{routeData.name}</h1>
						</div>
						<div className="pull-right">
							<div className="travel-content-top">
								<div>
									<p className="city">{routeData.source}</p>
									<p className="time">
										{this.state.sourceTimeformat}
									</p>
									<p className="date">
										{this.state.sourceDateformat}
									</p>
								</div>
								<div className="content-center">
									{`Seats Available: ${
										routeData.seats - preBookedSeats.length
									}`}
									<br />
									{`Price Rs. ${routeData.ticketprice}`}
								</div>
								<div>
									<p className="city">
										{routeData.destination}
									</p>
									<p className="time">
										{this.state.destTimeformat}
									</p>
									<p className="date">
										{this.state.destDateformat}
									</p>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div className="travel-booking-container">
					<div className="seats-container">
						<div className="heading">Book your Seats</div>
						<div className="seats-content">
							{this.busSeatHandler()}
						</div>
					</div>
					<div className="ticket-container">
						<div className="heading">
							Ticket Details
							<button
								disabled={this.state.tickets.length === 0}
								onClick={this.bookingHandler}
							>
								{`Book now Rs.${this.state.totalprice}`}
							</button>
						</div>
						<div className="ticket-content">
							<div className="ticket-contact">
								<div>
									<h3>Contact details</h3>
									<input
										type="text"
										className={
											this.state.contactEmailError
												? "error"
												: ""
										}
										placeholder="Email Id"
										text={this.state.contactEmail}
										onChange={(e) => {
											this.setState({
												contactEmail: e.target.value,
												contactEmailError: !validateEmail(
													e.target.value
												),
											});
										}}
									/>
									<input
										type="text"
										placeholder="Mobile Number"
										className={
											this.state.contactPhoneNoError
												? "error"
												: ""
										}
										text={this.state.contactPhoneNo}
										onChange={(e) =>
											this.setState({
												contactPhoneNo: e.target.value,
												contactPhoneNoError: !isValidPhoneNo(
													e.target.value
												),
											})
										}
									/>
								</div>
							</div>
							{this.state.tickets}
							{this.state.alert}
						</div>
					</div>
				</div>
			</div>
		);
	}
}

const mapStateToProps = (state) => {
	return {
		ticketData: state.ticketStore.ticketData,
	};
};

const mapDispatchToProps = (dispatch) => {
	return {
		addTicket: (newTicket) => dispatch(addTicket(newTicket)),
		deleteTicket: (seat) => dispatch(deleteTicket(seat)),
	};
};
export default connect(mapStateToProps, mapDispatchToProps)(BookingPage);
