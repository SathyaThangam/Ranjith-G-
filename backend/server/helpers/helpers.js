const jwt = require("jsonwebtoken");
const { v4: uuidv4 } = require("uuid");

const bcrypt = require("bcrypt");

// Generate unique id
exports.uid = (options = {}) => {
	const randomStr = (strLength) => {
		const chars = [
			..."abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
		];
		return [...Array(strLength)]
			.map(() => chars[Math.trunc(Math.random() * chars.length)])
			.join("");
	};

	const now = String(Date.now());
	const middlePos = Math.ceil(now.length / 2);
	let output = `${now.substr(0, middlePos)}-${randomStr(6)}-${now.substr(
		middlePos
	)}`;
	// We add a 3 letter CODE in front of the id to make it more recognizable
	if (options.prefix) output = `${options.prefix}-${output}`;
	return output;
};

//JWT helper functions
exports.authenticateUser = (req, res, next) => {
	console.log("request received",req.query);
	var sessionID;
	if (req.method === "POST") sessionID = req.body.sessionID;
	else if (req.method === "GET") sessionID = req.query.sessionID;
	console.log(sessionID);
	jwt.verify(
		req.cookies.token,
		process.env.ACCESS_TOKEN_SECRET,
		(err, data) => {
			if (err) return res.sendStatus(403);
			else {
				if (sessionID === data.sessionID) {
					req.user_id = data.id;
					console.log("data id", data.id);
					next();
				} else res.sendStatus(403);
			}
		}
	);
};

//Compares hash generated by bcrypt
exports.compareHash = async (data, hash) => {
	try {
		return await bcrypt.compare(data, hash);
	} catch (err) {
		console.log(err);
	}
};

exports.generateHash = async (data, saltRounds = 10) => {
	try {
		return await bcrypt.hash(data, saltRounds);
	} catch (err) {
		console.log(err);
	}
};

generateAccessToken = (data) => {
	const sessionID = uuidv4();
	data.sessionID = sessionID;
	return {
		accessToken: jwt.sign(data, process.env.ACCESS_TOKEN_SECRET, {
			expiresIn: "60m",
		}),
		sessionID: sessionID,
	};
};

exports.sendResponseWithAuthCookies = (res, userData, message) => {
	const maxAge = 60 * 60 * 1000; // minutes * seconds * milliseconds
	const { accessToken, sessionID } = generateAccessToken(userData);
	res.cookie("token", accessToken, {
		httpOnly: true,
		maxAge: maxAge,
		sameSite: "strict",
	});
	res.cookie("sessionID", sessionID, {
		maxAge: maxAge,
		sameSite: "strict",
	});
	res.json({ message: message });
};

//Server side Validation
exports.validateEmail = (value) => {
	const re = /^\w+([\\.-]?\w+)*@\w+([\\.-]?\w+)*(\.\w{2,3})+$/;
	return re.test(value);
};

exports.validatePassword = (value) => {
	let re = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$/;
	return re.test(value);
};
