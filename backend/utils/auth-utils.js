const jwt = require("jsonwebtoken");
const argon2 = require("argon2");

exports.generateAccessToken = (data) => {
	return {
		accessToken: jwt.sign(data, process.env.ACCESS_TOKEN_SECRET),
	};
};

const verifyAccessToken = (token) => {
	try {
		return jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);
	} catch (error) {
		if (error instanceof jwt.JsonWebTokenError) {
			return false;
		}
		return null;
	}
};

exports.authenticationMiddleware = async (req, res, next) => {
	const { headers } = req;
	const token = headers["authorization"].split(" ")[1];
	const data = verifyAccessToken(token);
	if (data) {
		const { email } = data;
		res.locals.email = email;
		next();
	} else res.sendStatus(403);
};

//Compares hash generated by argon
exports.compareHash = async (userPassword, storedPassword) => {
	try {
		return await argon2.verify(storedPassword, userPassword);
	} catch (err) {
		console.log(err);
		return err;
	}
};

exports.generateHash = async (password) => {
	try {
		return await argon2.hash(password);
	} catch (err) {
		console.log(err);
		return err;
	}
};

exports.validateEmail = (value) => {
	const re = /^\w+([\\.-]?\w+)*@\w+([\\.-]?\w+)*(\.\w{2,3})+$/;
	return re.test(value);
};

exports.validatePassword = (value) => {
	let re = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$/;
	return re.test(value);
};
